 g = activeSetGradient(model, covGrad)

 classVisualise(call)
 function point = localGetNormCursorPoint(figHandle)
 function [x, y] = localGetNormAxesPoint(point, axesHandle)
 function [x, y] = localCheckPointPosition(visualiseInfo)
























 g = gplvmActiveSetGradient(xVals, model, prior)

 e = gplvmActiveSetNegLogLikelihood(xVals, y, model, prior)

 e = gplvmActiveSetObjective(xVals, model, prior)

 g = gplvmApproxLogLikeActiveSetGrad(model)

 [ax] = gplvmFantasyPlot(model, visualiseFunction, axesWidth, varargin);

 model = gplvmFit(X, Y, numActive, options, noiseType, kernelType, lbls)

 g = gplvmGradientPoint(x_i, i, model, A) %A, invK, activeX, Y, D, theta, activeSet)

 model = gplvmInit(X, Y, kernelType, noiseType, selectionCriterion, ...
%                            numActive)

 g = gplvmKernelGradient(params, model, prior)

 X = gplvmKpcaInit(Y, kern, dims)

 gplvmLatentClassify(dataset, experimentNo)

 [Y, lbls] = gplvmLoadData(dataset)

 model = gplvmOptimise(model, options, lbls);

 model = gplvmOptimiseActiveSet(model, prior, display, iters)

 model = gplvmOptimiseKernel(model, prior, display, iters);

 model = gplvmOptimisePoint(model, i, prior, display, iters);

 options = gplvmOptions

 X = gplvmPcaInit(Y, dims)

 gplvmResultsDynamic(dataset, number, dataType, varargin)

 gplvmResultsFantasy(dataset, number, dataType, varargin)

 gplvmResultsStatic(dataset, number, dataType, varargin)

 [ax, data] = gplvmScatterPlot(model, YLbls);
 function returnVal = gplvmtwoDPlot(X, label, symbol)

 gplvmStaticImageVisualise(model, visualiseFunction, axesWidth, varargin)

 gplvmVisualise(model, YLbls, ...
% 			visualiseFunction, visualiseModify, varargin)

 gplvmVisualise1D(model, visualiseFunction, visualiseModify, varargin)

 imageModify(handle, imageValues, imageSize, transpose, negative, ...
% 		     scale)

 handle = imageVisualise(imageVals, imageSize, transpose, negative, ...
% 				 scale)

 g = pointApproxNegGradX(x, m, beta, model, prior)

 e = pointApproxNegLogLikelihood(x, m, beta, model, prior)

 g = pointNegGradX(x, y, model, prior)

 e = pointNegLogLikelihood(x, y, model, prior)

 vector3Modify(handle, values)

 handle = vector3Visualise(vals)

 vectorModify(handle, values)

 handle = vectorVisualise(vals)

